<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring boot + jooq</title>
    <url>/2021/04/12/JOOQ/</url>
    <content><![CDATA[<h4 id="pom-配置"><a href="#pom-配置" class="headerlink" title="pom 配置"></a>pom 配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- jooq--&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.jooq&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jooq&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;3.13.4&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.jooq&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jooq-meta&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;3.13.4&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;!--数据库schema代码生成器 jooq代码没有构建成功那就是（version）版本不对 --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.jooq&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jooq-codegen&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;3.13.4&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">   	&lt;!-- jooq 插件的配置 --&gt;</span><br><span class="line">   		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.jooq&lt;&#x2F;groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jooq-codegen-maven&lt;&#x2F;artifactId&gt;</span><br><span class="line">			&lt;!-- 这个version 要与上面的jooq-codegen的一致--&gt;</span><br><span class="line">			&lt;version&gt;3.13.4&lt;&#x2F;version&gt;</span><br><span class="line">			&lt;executions&gt;</span><br><span class="line">				&lt;execution&gt;</span><br><span class="line">					&lt;goals&gt;</span><br><span class="line">						&lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class="line">					&lt;&#x2F;goals&gt;</span><br><span class="line">				&lt;&#x2F;execution&gt;</span><br><span class="line">			&lt;&#x2F;executions&gt;</span><br><span class="line">			&lt;!--对应的数据库依赖--&gt;</span><br><span class="line">			&lt;dependencies&gt;</span><br><span class="line">				&lt;dependency&gt;</span><br><span class="line">					&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">					&lt;version&gt;5.1.40&lt;&#x2F;version&gt;</span><br><span class="line">				&lt;&#x2F;dependency&gt;</span><br><span class="line">			&lt;&#x2F;dependencies&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;jdbc&gt;</span><br><span class="line">                       &lt;!-- 配置需要的数据库的驱动 --&gt;</span><br><span class="line">                       &lt;driver&gt;com.mysql.jdbc.Driver&lt;&#x2F;driver&gt;</span><br><span class="line">                       &lt;!-- 配置数据库地址 --&gt;</span><br><span class="line">                       &lt;url&gt;jdbc:mysql:&#x2F;&#x2F;rm-bp1bwb3s221or2h6t0o.mysql.rds.aliyuncs.com:3306&#x2F;pms_test&lt;&#x2F;url&gt;</span><br><span class="line">                       &lt;!-- 配置数据库用户名--&gt;</span><br><span class="line">                       &lt;user&gt;pms_test&lt;&#x2F;user&gt;</span><br><span class="line">                       &lt;!-- 配置数据库密码--&gt;</span><br><span class="line">                       &lt;password&gt;Ftk5xg@eMeR8v6L&lt;&#x2F;password&gt;</span><br><span class="line">                   &lt;&#x2F;jdbc&gt;</span><br><span class="line">                   &lt;generator&gt;</span><br><span class="line">                       &lt;!-- 代码生成器 --&gt;</span><br><span class="line">                       &lt;name&gt;org.jooq.codegen.JavaGenerator&lt;&#x2F;name&gt;</span><br><span class="line">                       &lt;database&gt;</span><br><span class="line">                           &lt;!--是否重写主键--&gt;</span><br><span class="line">                           &lt;overridePrimaryKeys&gt;true&lt;&#x2F;overridePrimaryKeys&gt;</span><br><span class="line"></span><br><span class="line">                           &lt;name&gt;org.jooq.meta.mysql.MySQLDatabase&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">                           &lt;!--include和exclude用于控制为数据库中哪些表生成代码--&gt;</span><br><span class="line">                           &lt;includes&gt;.*&lt;&#x2F;includes&gt;</span><br><span class="line">                           &lt;excludes&gt;&lt;&#x2F;excludes&gt;</span><br><span class="line">                           &lt;!--数据库名称--&gt;</span><br><span class="line">                           &lt;inputSchema&gt;pms_test&lt;&#x2F;inputSchema&gt;</span><br><span class="line">                       &lt;&#x2F;database&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;generate&gt;</span><br><span class="line">                           &lt;!--是否生成dao和pojo--&gt;</span><br><span class="line">                           &lt;daos&gt;true&lt;&#x2F;daos&gt;</span><br><span class="line">                           &lt;pojos&gt;true&lt;&#x2F;pojos&gt;</span><br><span class="line">                           &lt;!--是否把数据库时间类型映射到java 8时间类型--&gt;</span><br><span class="line">                           &lt;javaTimeTypes&gt;true&lt;&#x2F;javaTimeTypes&gt;</span><br><span class="line">                           &lt;interfaces&gt;false&lt;&#x2F;interfaces&gt;</span><br><span class="line">                           &lt;!--是否在生成的代码中添加spring注释，比如@Repository--&gt;</span><br><span class="line">                           &lt;springAnnotations&gt;true&lt;&#x2F;springAnnotations&gt;</span><br><span class="line">                       &lt;&#x2F;generate&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;target&gt;</span><br><span class="line">                           &lt;!--生成代码文件的包名及放置目录--&gt;</span><br><span class="line">                           &lt;packageName&gt;com.hdpathol.pms.domain.jooq&lt;&#x2F;packageName&gt;</span><br><span class="line">                           &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">                       &lt;&#x2F;target&gt;</span><br><span class="line">                   &lt;&#x2F;generator&gt;</span><br><span class="line">               &lt;&#x2F;configuration&gt;</span><br><span class="line">		&lt;&#x2F;plugin&gt;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h4 id="jooq-的dataSource配置，我这边是Druid"><a href="#jooq-的dataSource配置，我这边是Druid" class="headerlink" title="jooq 的dataSource配置，我这边是Druid"></a>jooq 的dataSource配置，我这边是Druid</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.hdpathol.config.mutisource;</span><br><span class="line"></span><br><span class="line">import org.jooq.ConnectionProvider;</span><br><span class="line">import org.jooq.DSLContext;</span><br><span class="line">import org.jooq.SQLDialect;</span><br><span class="line">import org.jooq.impl.DSL;</span><br><span class="line">import org.jooq.impl.DataSourceConnectionProvider;</span><br><span class="line">import org.jooq.impl.DefaultConfiguration;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @program: pms</span><br><span class="line"> * @description: jooq config</span><br><span class="line"> * @author: zcx</span><br><span class="line"> * @create: 2021-04-09 18:34</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class JooqConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;primaryDataSource&quot;)</span><br><span class="line">    private DataSource primaryDataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private org.jooq.Configuration jooqConfiguration;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DSLContext dsl()&#123;</span><br><span class="line">        ConnectionProvider connectionProvider &#x3D;  new DataSourceConnectionProvider(primaryDataSource);</span><br><span class="line">        org.jooq.Configuration configuration &#x3D; jooqConfiguration</span><br><span class="line">                .set(connectionProvider)</span><br><span class="line">                .set(SQLDialect.MYSQL);</span><br><span class="line">        return DSL.using(configuration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public org.jooq.Configuration jooqConfiguration()&#123;</span><br><span class="line">        return new DefaultConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>熙</title>
    <url>/2021/03/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post ~~~&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>同源策略</title>
    <url>/2021/03/29/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5md/</url>
    <content><![CDATA[<h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，现在所有支持 JavaScript 的浏览器都会使用这个策略。如果缺少了同源策略，浏览器很容易受到 XSS、 CSFR 等攻击。</p>
]]></content>
  </entry>
  <entry>
    <title>security 客户端参数</title>
    <url>/2021/03/29/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>客户端参数</p>
<p>client_id:客户端准入标识</p>
<p>client_secret:客户端密钥</p>
<p>grant_type:授权类型，填写client_credentials表示客户端模式</p>
<h2 id="3）通过Authorization-Code获取Access-Token"><a href="#3）通过Authorization-Code获取Access-Token" class="headerlink" title="3）通过Authorization Code获取Access Token"></a>3）通过Authorization Code获取Access Token</h2><p>通过上面获得的Authorization Code，接下来便可以用其换取一个Access Token。获取方式是：应用在其服务端程序中发送请求（推荐使用POST）到 百度OAuth2.0授权服务的<a href="https://openapi.baidu.com/oauth/2.0/token%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%B9%B6%E5%B8%A6%E4%B8%8A%E4%BB%A5%E4%B8%8B5%E4%B8%AA%E5%BF%85%E9%A1%BB%E5%8F%82%E6%95%B0%EF%BC%9A">https://openapi.baidu.com/oauth/2.0/token地址，并带上以下5个必须参数：</a></p>
<ul>
<li>grant_type：必须参数，此值固定为authorization_code。</li>
<li>code：必须参数，通过上面第一步所获得的Authorization Code。</li>
<li>client_id：必须参数，应用的API Key。</li>
<li>client_secret：必须参数，应用的Secret Key。</li>
<li>redirect_uri：必须参数，该值必须与获取Authorization Code时传递的redirect_uri保持一致。</li>
</ul>
<p>例如：</p>
<blockquote>
<p><a href="https://openapi.baidu.com/oauth/2.0/token?grant_type=authorization_code&amp;code=71c279ccd145a3dff977b38e6a8e34b4&amp;client_id=n1pRXWNYFa4MQLzpDfHyovFb&amp;client_secret=r4GZF9ALIAJjzeNqFPqA86zGbeion6WH&amp;redirect_uri=http://localhost:7080/login">https://openapi.baidu.com/oauth/2.0/token?grant_type=authorization_code&amp;code=71c279ccd145a3dff977b38e6a8e34b4&amp;client_id=n1pRXWNYFa4MQLzpDfHyovFb&amp;client_secret=r4GZF9ALIAJjzeNqFPqA86zGbeion6WH&amp;redirect_uri=http://localhost:7080/login</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了防止分布式系统中的多个进程之间相互干扰，我们需要一种分布式协调技术来对这些进程进行调度。而这个分布式协调技术的核心就是来实现这个<strong>分布式锁</strong>。</p>
<h2 id="为什么要使用分布式锁"><a href="#为什么要使用分布式锁" class="headerlink" title="为什么要使用分布式锁"></a>为什么要使用分布式锁</h2><p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.png" alt="img">a</p>
<ul>
<li>成员变量 A 存在 JVM1、JVM2、JVM3 三个 JVM 内存中</li>
<li>成员变量 A 同时都会在 JVM 分配一块内存，三个请求发过来同时对这个变量操作，显然结果是不对的</li>
<li>不是同时发过来，三个请求分别操作三个不同 JVM 内存区域的数据，变量 A 之间不存在共享，也不具有可见性，处理的结果也是不对的<br> 注：该成员变量 A 是一个有状态的对象</li>
</ul>
<p>如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题，<strong>这就是分布式锁要解决的问题</strong></p>
<h2 id="分布式锁应该具备哪些条件"><a href="#分布式锁应该具备哪些条件" class="headerlink" title="分布式锁应该具备哪些条件"></a>分布式锁应该具备哪些条件</h2><ul>
<li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</li>
<li>高可用的获取锁与释放锁</li>
<li>高性能的获取锁与释放锁</li>
<li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li>
<li>具备锁失效机制，防止死锁</li>
<li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li>
</ul>
<h2 id="分布式锁的实现有哪些"><a href="#分布式锁的实现有哪些" class="headerlink" title="分布式锁的实现有哪些"></a>分布式锁的实现有哪些</h2><ul>
<li>Memcached：利用 Memcached 的 <code>add</code> 命令。此命令是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>add</code> 成功，也就意味着线程得到了锁。</li>
<li>Redis：和 Memcached 的方式类似，利用 Redis 的 <code>setnx</code> 命令。此命令同样是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>set</code> 成功。</li>
<li><strong>Zookeeper</strong>：利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。Zookeeper 设计的初衷，就是为了实现分布式锁服务的。</li>
<li>Chubby：Google 公司实现的粗粒度分布式锁服务，底层利用了 Paxos 一致性算法。</li>
</ul>
<h2 id="通过-Redis-分布式锁的实现理解基本概念"><a href="#通过-Redis-分布式锁的实现理解基本概念" class="headerlink" title="通过 Redis 分布式锁的实现理解基本概念"></a>通过 Redis 分布式锁的实现理解基本概念</h2><p>分布式锁实现的三个核心要素：</p>
<h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>最简单的方法是使用 <code>setnx</code> 命令。<code>key</code> 是锁的唯一标识，按业务来决定命名。比如想要给一种商品的秒杀活动加锁，可以给 <code>key</code> 命名为 “lock_sale_商品ID” 。而 <code>value</code> 设置成什么呢？我们可以姑且设置成 <code>1</code>。加锁的伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setnx（lock_sale_商品ID，1）</span><br></pre></td></tr></table></figure>

<p>当一个线程执行 <code>setnx</code> 返回 <code>1</code>，说明 <code>key</code> 原本不存在，该线程成功得到了锁；当一个线程执行 <code>setnx</code> 返回 <code>0</code>，说明 <code>key</code> 已经存在，该线程抢锁失败。</p>
<h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>有加锁就得有解锁。当得到锁的线程执行完任务，需要释放锁，以便其他线程可以进入。释放锁的最简单方式是执行 <code>del</code> 指令，伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span>（lock_sale_商品ID）</span><br></pre></td></tr></table></figure>

<p>释放锁之后，其他线程就可以继续执行 <code>setnx</code> 命令来获得锁。</p>
<h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>锁超时是什么意思呢？如果一个得到锁的线程在执行任务的过程中挂掉，来不及显式地释放锁，这块资源将会永远被锁住（<strong>死锁</strong>），别的线程再也别想进来。所以，<code>setnx</code> 的 <code>key</code> 必须设置一个超时时间，以保证即使没有被显式释放，这把锁也要在一定时间后自动释放。<code>setnx</code> 不支持超时参数，所以需要额外的指令，伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expire（lock_sale_商品ID， 30）</span><br></pre></td></tr></table></figure>

<p>综合伪代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（setnx（lock_sale_商品ID，<span class="number">1</span>） == <span class="number">1</span>）&#123;</span><br><span class="line">    expire（lock_sale_商品ID，<span class="number">30</span>）</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something ......</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        del（lock_sale_商品ID）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="存在什么问题"><a href="#存在什么问题" class="headerlink" title="存在什么问题"></a>存在什么问题</h3><p>以上伪代码中存在三个致命问题</p>
<h4 id="setnx-和-expire-的非原子性"><a href="#setnx-和-expire-的非原子性" class="headerlink" title="setnx 和 expire 的非原子性"></a><code>setnx</code> 和 <code>expire</code> 的非原子性</h4><p>设想一个极端场景，当某线程执行 <code>setnx</code>，成功得到了锁：</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.png" alt="img"></p>
<p><code>setnx</code> 刚执行成功，还未来得及执行 <code>expire</code> 指令，节点 1 挂掉了。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/3.png" alt="img"></p>
<p>这样一来，这把锁就没有设置过期时间，变成<strong>死锁</strong>，别的线程再也无法获得锁了。</p>
<p>怎么解决呢？<code>setnx</code> 指令本身是不支持传入超时时间的，<code>set</code> 指令增加了可选参数，伪代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>（lock_sale_商品ID，1，30，NX）</span><br></pre></td></tr></table></figure>

<p>这样就可以取代 <code>setnx</code> 指令。</p>
<h4 id="del-导致误删"><a href="#del-导致误删" class="headerlink" title="del 导致误删"></a><code>del</code> 导致误删</h4><p>又是一个极端场景，假如某线程成功得到了锁，并且设置的超时时间是 30 秒。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4.png" alt="img"></p>
<p>如果某些原因导致线程 A 执行的很慢很慢，过了 30 秒都没执行完，这时候锁过期自动释放，线程 B 得到了锁。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/5.png" alt="img"></p>
<p>随后，线程 A 执行完了任务，线程 A 接着执行 <code>del</code> 指令来释放锁。但这时候线程 B 还没执行完，线程A实际上 <code>删除的是线程 B 加的锁</code>。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/6.png" alt="img"></p>
<p>怎么避免这种情况呢？可以在 <code>del</code> 释放锁之前做一个判断，验证当前的锁是不是自己加的锁。至于具体的实现，可以在加锁的时候把当前的线程 ID 当做 <code>value</code>，并在删除之前验证 <code>key</code> 对应的 <code>value</code> 是不是自己线程的 ID。</p>
<p>加锁：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> threadId = Thread.currentThread().getId()</span><br><span class="line"><span class="keyword">set</span>（key，threadId ，<span class="number">30</span>，NX）</span><br></pre></td></tr></table></figure>

<p>解锁：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（threadId .<span class="keyword">equals</span>(redisClient.<span class="keyword">get</span>(key))）&#123;</span><br><span class="line">    del(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这样做又隐含了一个新的问题，判断和释放锁是两个独立操作，不是原子性。</p>
<h4 id="出现并发的可能性"><a href="#出现并发的可能性" class="headerlink" title="出现并发的可能性"></a>出现并发的可能性</h4><p>还是刚才第二点所描述的场景，虽然我们避免了线程 A 误删掉 <code>key</code> 的情况，但是同一时间有 A，B 两个线程在访问代码块，仍然是不完美的。怎么办呢？我们可以让获得锁的线程开启一个<strong>守护线程</strong>，用来给快要过期的锁“续航”。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7.png" alt="img"></p>
<p>当过去了 29 秒，线程 A 还没执行完，这时候守护线程会执行 <code>expire</code> 指令，为这把锁“续命”20 秒。守护线程从第 29 秒开始执行，每 20 秒执行一次。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/8.png" alt="img"></p>
<p>当线程 A 执行完任务，会显式关掉守护线程。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9.png" alt="img"></p>
<p>另一种情况，如果节点 1 忽然断电，由于线程 A 和守护线程在同一个进程，守护线程也会停下。这把锁到了超时的时候，没人给它续命，也就自动释放了。</p>
<p><img src="/2021/03/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/10.png" alt="img"></p>
<p>并发原创，转载<a href="https://www.jianshu.com/p/a1ebab8ce78a">https://www.jianshu.com/p/a1ebab8ce78a</a></p>
]]></content>
  </entry>
</search>
